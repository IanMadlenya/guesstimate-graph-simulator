{"version":3,"file":"library-dist.js","sources":["library-dist.js","/source/library-dist.js"],"names":["factory","exports","module","define","amd","_","require","NodeCollection","EdgeCollection","RepoGraph","repo","defaultData","nodes","edges","data","this","unsavedChanges","propogate","removeNode","nodeId","node","get","remove","dependents","allOfTtype","map","n","outsideMetrics","outsideNodes","select","ttype","insideNodes","union","allOutputs","difference","models","toCytoscape","params","asCytoscape","undefined","editingNode","editingCytoscapeNode","find","f","id","editing","toJSON"],"mappings":"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","sourceRoot":"/source/","sourcesContent":["(function (factory) {\n  !(typeof exports === 'object' && typeof module !== 'undefined') &&\n  typeof define === 'function' && define.amd ? define(factory) :\n  factory()\n}(function () { 'use strict';\n\n  var _ = require('lodash');\n  var NodeCollection = require('./collections/nodecollection');\n  var EdgeCollection = require('./collections/edgecollection');\n\n  class RepoGraph {\n    constructor(repo){\n      var defaultData = { nodes: [], edges: []  };\n      var data = repo.data || defaultData;\n      this.nodes = new NodeCollection(data.nodes, this);\n      this.edges = new EdgeCollection(data.edges, this);\n      this.unsavedChanges = false;\n      this.propogate();\n    }\n    removeNode(nodeId){\n      var node = this.nodes.get(nodeId);\n      node.remove();\n    }\n    propogate(){\n      var dependents = this.nodes.allOfTtype('dependent');\n      dependents.map(n => n.propogate());\n    }\n    outsideMetrics(node){\n      var nodes = this.outsideNodes(node);\n      return _.select(nodes, function(n) {return (n.ttype() !== 'function'); });\n    }\n    // Used to find possible outputs for a function node\n    outsideNodes(node){\n      var insideNodes = _.union([node], node.allOutputs());\n      return _.difference(this.nodes.models, insideNodes);\n    }\n    toCytoscape(params){\n      let asCytoscape = {nodes: this.nodes.toCytoscape(), edges: this.edges.toCytoscape()};\n      if (params.editingNode !== undefined) {\n        const editingCytoscapeNode = _.find(asCytoscape.nodes, function(f){return f.data.nodeId === params.editingNode.id; }, this);\n        editingCytoscapeNode.data.editing = 'true';\n      }\n      return asCytoscape;\n    }\n    toJSON() {\n      return {\n        nodes: this.nodes.toJSON(),\n        edges: this.edges.toJSON()\n      };\n    }\n  }\n\n  module.exports = RepoGraph;\n\n}));\n","(function (factory) {\n  !(typeof exports === 'object' && typeof module !== 'undefined') &&\n  typeof define === 'function' && define.amd ? define(factory) :\n  factory()\n}(function () { 'use strict';\n\n  var _ = require('lodash');\n  var NodeCollection = require('./collections/nodecollection');\n  var EdgeCollection = require('./collections/edgecollection');\n\n  class RepoGraph {\n    constructor(repo){\n      var defaultData = { nodes: [], edges: []  };\n      var data = repo.data || defaultData;\n      this.nodes = new NodeCollection(data.nodes, this);\n      this.edges = new EdgeCollection(data.edges, this);\n      this.unsavedChanges = false;\n      this.propogate();\n    }\n    removeNode(nodeId){\n      var node = this.nodes.get(nodeId);\n      node.remove();\n    }\n    propogate(){\n      var dependents = this.nodes.allOfTtype('dependent');\n      dependents.map(n => n.propogate());\n    }\n    outsideMetrics(node){\n      var nodes = this.outsideNodes(node);\n      return _.select(nodes, function(n) {return (n.ttype() !== 'function'); });\n    }\n    // Used to find possible outputs for a function node\n    outsideNodes(node){\n      var insideNodes = _.union([node], node.allOutputs());\n      return _.difference(this.nodes.models, insideNodes);\n    }\n    toCytoscape(params){\n      let asCytoscape = {nodes: this.nodes.toCytoscape(), edges: this.edges.toCytoscape()};\n      if (params.editingNode !== undefined) {\n        const editingCytoscapeNode = _.find(asCytoscape.nodes, function(f){return f.data.nodeId === params.editingNode.id; }, this);\n        editingCytoscapeNode.data.editing = 'true';\n      }\n      return asCytoscape;\n    }\n    toJSON() {\n      return {\n        nodes: this.nodes.toJSON(),\n        edges: this.edges.toJSON()\n      };\n    }\n  }\n\n  module.exports = RepoGraph;\n\n}));\n"]}